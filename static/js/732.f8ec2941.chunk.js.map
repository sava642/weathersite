{"version":3,"file":"static/js/732.f8ec2941.chunk.js","mappings":"8NAWA,MA8CA,EA9CkCA,KAEjC,MAAMC,EAAa,IAAIC,EAAAA,KAAK,CAC3BC,QAAS,6EACTC,SAAU,CAAC,GAAI,OAEV,SAAEC,EAAQ,UAAEC,IAAcC,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMC,WAClEC,GAAcH,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMG,OAAOD,eAC5DE,EAAUC,IAAeC,EAAAA,EAAAA,UAA2B,CAACT,GAAY,EAAGC,GAAa,IAuBxF,OAjBAS,EAAAA,EAAAA,YAAU,KAET,MAAMC,EAAQC,YAAW,KACP,OAAbZ,GAAmC,OAAdC,GACxBO,EAAY,CAACR,EAAUC,GACxB,GACE,KAEH,MAAO,IAAMY,aAAaF,EAAM,GAC9B,CAACX,EAAUC,KAEdS,EAAAA,EAAAA,YAAU,KACLL,GACHG,EAAY,CAACM,WAAWT,EAAYU,KAAMD,WAAWT,EAAYW,MAClE,GACE,CAACX,KAGHY,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACpCC,EAAAA,EAAAA,MAACC,EAAAA,EAAY,CAACC,OAAQf,EAAUgB,KAAM,EAAGC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASP,SAAA,EACjFF,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACTC,IAAI,qDACJC,YAAY,2FAEbZ,EAAAA,EAAAA,KAACa,EAAAA,EAAM,CAACvB,SAAUA,EAAUwB,KAAMnC,EAAYoC,WAAW,EAAMC,cAAe,CAAEC,QA5BzDC,IACzB,MAAMC,EAAcD,EAAEE,OAAOC,YAC7BC,QAAQC,IAAI,CAACJ,EAAYrB,IAAKqB,EAAYpB,KAAK,GA0B+DG,UAC3GF,EAAAA,EAAAA,KAACwB,EAAAA,EAAK,CAAAtB,SAAC,wBAGJ,E,iCCnDD,MAAMuB,EAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,we,MCIjC,MAAMC,EAA0BJ,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sOA0C1C,EAzBuBE,KACtB,MAAMC,GAAc/C,EAAAA,EAAAA,IAAYgD,EAAAA,KAE1B,KAAEC,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,IAAcC,EAAAA,EAAAA,UAAQ,IAAMR,GAAa,CAACA,IAE9FS,EAAoBC,GAAiBC,KAAKC,MAAMF,EAAO,QAE7D,OAAKR,GAASC,GAAgBC,GAAcC,GAAaC,GAAaC,GAKrEpC,EAAAA,EAAAA,MAAC2B,EAAuB,CAAA5B,SAAA,EACvBF,EAAAA,EAAAA,KAAA,KAAAE,SAAIgC,KACJ/B,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACCC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,gBAAcuC,EAAiBN,GAAa,aAChDhC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,eAAauC,EAAiBL,GAAW,aAC7CjC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,aAAWmC,EAAS,QACxBlC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,aAAWoC,EAAS,WACxBnC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,eAAaqC,EAAU,iBAXtBvC,EAAAA,EAAAA,KAACyB,EAAO,GAaW,E,eCpC5B,MAAMoB,GAAgBnB,EAAAA,EAAAA,IAAOoB,EAAAA,IAAPpB,CAA+BE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2IAcrD,EAJiCkB,IAAkB,IAAjB,QAAEC,GAASD,EAC5C,OAAO/C,EAAAA,EAAAA,KAAC6C,EAAa,CAACG,QAASA,GAAW,E,sBCZ3C,MAIA,EAJoCD,IAAkB,IAAjB,QAAEC,GAASD,EAC/C,OAAO/C,EAAAA,EAAAA,KAACiD,EAAAA,IAAoB,CAACC,MAAM,MAAMC,KAAM,GAAIH,QAASA,GAAW,E,UCSxE,MAAMI,EAAkB1B,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAS5BwB,EAAe3B,EAAAA,GAAOC,IAAG2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,qHASzB0B,EAAW7B,EAAAA,GAAOC,IAAG6B,IAAAA,GAAA3B,EAAAA,EAAAA,GAAA,+JAoC3B,EA3BkB4B,KACjB,MAAMC,GAAwBC,EAAAA,EAAAA,MACxBC,GAAY3E,EAAAA,EAAAA,KAAaC,GAAqBA,EAAM2E,gBAAgBA,kBAU1E,OACC1D,EAAAA,EAAAA,MAACkD,EAAY,CAAAnD,SAAA,EACZF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,eACHF,EAAAA,EAAAA,KAACoD,EAAe,CAAAlD,SACd0D,EAAUE,KAAI,CAACC,EAAYC,KAC3B7D,EAAAA,EAAAA,MAACoD,EAAQ,CAAaP,QAASA,KAAMiB,OAbhBC,EAagCH,OAZxDzC,QAAQC,IAAI2C,GADYA,KAasC,EAAAhE,SAAA,EAC1DF,EAAAA,EAAAA,KAAA,QAAAE,SAAO6D,EAAK7B,QACZlC,EAAAA,EAAAA,KAACmE,EAAU,CAACnB,QAASA,KAAMoB,OAXLC,EAWuBN,EAAK7B,UAVtDwB,GAASY,EAAAA,EAAAA,IAAmB,CAAED,cADJA,KAWkC,MAF1CL,SAMH,E,mBCnDjB,MAAMZ,EAAkB1B,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uIAQ5BwB,EAAe3B,EAAAA,GAAOC,IAAG2B,IAAAA,GAAAzB,EAAAA,EAAAA,GAAA,oHASzB0B,EAAW7B,EAAAA,GAAOC,IAAG6B,IAAAA,GAAA3B,EAAAA,EAAAA,GAAA,kFA4D3B,EAtDsB0C,KACrB,MAAMb,GAAWC,EAAAA,EAAAA,MAEXa,IADWC,EAAAA,EAAAA,OACMxF,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMG,OAAOmF,mBAEtE/E,EAAAA,EAAAA,YAAU,KAET+E,EAAeE,SAASR,IACvBS,EAAiBT,EAAK,IAIvBU,OAAOC,iBAAiB,WAAYC,GAG7B,KACNF,OAAOG,oBAAoB,WAAYD,EAAe,IAErD,CAACN,IAEJ,MAAMG,EAAoBT,IAEzB,MACMhF,EAAQ,CAAEG,OADE,IAAImF,EAAgBN,IAEtCU,OAAOI,QAAQC,UAAU/F,EAAO,GAAI,GAAG,EAQlC4F,EAAkBI,IAEvB,MAAMhG,EAAQgG,EAAMhG,MAChBA,GAASA,EAAMG,QAClBiC,QAAQC,IAAI,2BAA4BrC,EAAMG,OAC/C,EAGD,OADAiC,QAAQC,IAAIqD,OAAOI,UAElB7E,EAAAA,EAAAA,MAACkD,EAAY,CAAAnD,SAAA,EACZF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,oBACHF,EAAAA,EAAAA,KAACoD,EAAe,CAAAlD,SACdsE,EAAeV,KAAI,CAACC,EAAYC,KAChChE,EAAAA,EAAAA,KAACuD,EAAQ,CAAaP,QAASA,KAAMiB,OAlBhBC,EAkBgCH,EAjBxDzC,QAAQC,IAAI2C,QACZR,GAASyB,EAAAA,EAAAA,IAAgB,CAAEjB,UAFHA,KAkBsC,EAAAhE,SACzD6D,EAAK7B,MADQ8B,SAKH,ECxDjB,EApBuBoB,KACtB,MAAM1B,GAAwBC,EAAAA,EAAAA,MACxBvE,GAAcH,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMG,OAAOD,cAMnE,OACCe,EAAAA,EAAAA,MAAA,OAAKI,MAAO,CAAEjB,SAAU,YAAaY,SAAA,EACpCF,EAAAA,EAAAA,KAACtB,EAAe,KAChBsB,EAAAA,EAAAA,KAACqF,EAAAA,GAAU,KACXrF,EAAAA,EAAAA,KAACuE,EAAa,KACdvE,EAAAA,EAAAA,KAACyD,EAAS,KACVzD,EAAAA,EAAAA,KAACsF,EAAO,CAACtC,QAASA,KAVC,OAAhB5D,GACHsE,GAAS6B,EAAAA,EAAAA,IAAgB,CAAErB,KAAM9E,IASQ,KACzCY,EAAAA,EAAAA,KAAC+B,EAAc,MACV,C","sources":["features/map/MapWithLocation.tsx","shared/Spinner.tsx","features/weather/WeatherDetails.tsx","shared/AddIcon.tsx","shared/DeleteIcon.tsx","shared/Favorites.tsx","shared/ResentResults.tsx","pages/Main/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../app/reducers';\nimport \"leaflet/dist/leaflet.css\";\nimport { FaMapMarkerAlt } from 'react-icons/fa';\nimport { Icon } from 'leaflet';\n\n\n\n\nconst MapWithLocation: React.FC = () => {\n\n\tconst customIcon = new Icon({\n\t\ticonUrl: 'https://cdn4.iconfinder.com/data/icons/small-n-flat/24/map-marker-1024.png',\n\t\ticonSize: [24, 24], // Размер иконки\n\t});\n\tconst { latitude, longitude } = useSelector((state: RootState) => state.location);\n\tconst currentCity = useSelector((state: RootState) => state.cities.currentCity);\n\tconst [position, setPosition] = useState<[number, number]>([latitude || 0, longitude || 0]);\n\n\tconst handleMarkerDrag = (e: any) => {\n\t\tconst newPosition = e.target.getLatLng(); // Получаем новые координаты метки\n\t\tconsole.log([newPosition.lat, newPosition.lng])\n\t};\n\tuseEffect(() => {\n\t\t// После 2 секунд проверяем, доступны ли данные о местоположении\n\t\tconst timer = setTimeout(() => {\n\t\t\tif (latitude !== null && longitude !== null) {\n\t\t\t\tsetPosition([latitude, longitude]); // Обновляем позицию с данными о местоположении\n\t\t\t}\n\t\t}, 2000);\n\n\t\treturn () => clearTimeout(timer); // Очищаем таймер при размонтировании компонента\n\t}, [latitude, longitude]);\n\n\tuseEffect(() => {\n\t\tif (currentCity) {\n\t\t\tsetPosition([parseFloat(currentCity.lat), parseFloat(currentCity.lng)]);\n\t\t}\n\t}, [currentCity]);\n\n\treturn (\n\t\t<div className=\"custom-map-container\" >\n\t\t\t<MapContainer center={position} zoom={2} style={{ width: '100%', height: '100%' }}>\n\t\t\t\t<TileLayer\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\t\t\t\t\tattribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n\t\t\t\t/>\n\t\t\t\t<Marker position={position} icon={customIcon} draggable={true} eventHandlers={{ dragend: handleMarkerDrag }}>\n\t\t\t\t\t<Popup>Your location</Popup>\n\t\t\t\t</Marker>\n\t\t\t</MapContainer>\n\t\t</div>\n\t);\n};\n\nexport default MapWithLocation;\n\n","import styled from \"styled-components\";\n\nexport const Spinner = styled.div`\nmargin: 40px;\n  border: 12px solid pink;\n  border-top: 12px deeppink solid;\n  border-radius: 50%;\n  height: 60px;\n  width: 60px;\n  animation: spin 2s linear infinite;\n  /* \n  border: 12px solid #f3f3f3; \n  border-top: 12px solid #3498db;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  animation: spin 2s linear infinite; */\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { forecastSelector } from '../../entities/forecast';\nimport { Spinner } from '../../shared/Spinner';\nimport styled from 'styled-components';\n\nconst WeatherDetailsContainer = styled.div`\n  position: absolute;\n  z-index: 9999;\n  top: 50%;\n  right: 30px;\n  transform: translateY(-80%);\n  ul {\n\tlist-style-type: none;\n\tpadding: 0;\n\tmargin: 0;\n }\n\n li {\n\ttext-decoration: none;\n\tcolor: #333;\n`;\n\nconst WeatherDetails = () => {\n\tconst weatherData = useSelector(forecastSelector);\n\n\tconst { name, temperature, feelsLike, humidity, pressure, windSpeed } = useMemo(() => weatherData, [weatherData]);\n\n\tconst convertToCelsius = (temp: number) => Math.round(temp - 273.15);\n\n\tif (!name || !temperature || !feelsLike || !humidity || !pressure || !windSpeed) {\n\t\treturn <Spinner />;\n\t}\n\n\treturn (\n\t\t<WeatherDetailsContainer>\n\t\t\t<p>{name}</p>\n\t\t\t<ul>\n\t\t\t\t<li>Temperature: {convertToCelsius(temperature)} °C</li>\n\t\t\t\t<li>Feels like: {convertToCelsius(feelsLike)} °C</li>\n\t\t\t\t<li>Humidity: {humidity}%</li>\n\t\t\t\t<li>Pressure: {pressure} hPa</li>\n\t\t\t\t<li>Wind speed: {windSpeed} m/s</li>\n\t\t\t</ul>\n\t\t</WeatherDetailsContainer>\n\t);\n};\n\nexport default WeatherDetails;\n\n\n","import React from 'react';\nimport { MdFormatListBulletedAdd } from 'react-icons/md';\nimport styled from 'styled-components';\n\ninterface Props {\n\tonClick: () => void;\n}\n\nconst StyledAddIcon = styled(MdFormatListBulletedAdd)`\n\tposition: absolute;\n\ttop: 20px;\n\tright: 20px;\n\tz-index: 9999;\n\tcolor: yellow;\n\tfont-size: 48px;\n\tcursor: pointer;\n`;\n\nconst AddIcon: React.FC<Props> = ({ onClick }) => {\n\treturn <StyledAddIcon onClick={onClick} />;\n};\n\nexport default AddIcon;\n","import React from 'react';\nimport { AiOutlineCloseCircle } from 'react-icons/ai';\n\ninterface Props {\n\tonClick: () => void;\n}\n\nconst DeleteIcon: React.FC<Props> = ({ onClick }) => {\n\treturn <AiOutlineCloseCircle color=\"red\" size={24} onClick={onClick} />;\n};\n\nexport default DeleteIcon;\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../app/reducers';\nimport { removeFavoriteCity } from '../entities/favorites';\nimport { AppDispatch } from '../app/store';\nimport DeleteIcon from './DeleteIcon';\n\ninterface City {\n\tname: string;\n\tlat: string;\n\tlng: string;\n\tcountry: string;\n\tadmin1: string;\n\tadmin2: string;\n}\n\nconst SquareContainer = styled.div`\n  border-radius: 10px;\n  background-color: #00ccff;\n  z-index: 99999;\n  overflow: auto;\n  width: 100%;\n  height: 100%;\n`;\n\nconst SquarWrapper = styled.div`\n  position: absolute;\n  right: 20px;\n  bottom: 140px;\n  z-index: 99999;\n  width: 40%;\n  height: 20%;\n`;\n\nconst ListItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n  border-bottom: 1px solid #ccc;\n  cursor: pointer;\n`;\n\nconst Favorites = () => {\n\tconst dispatch: AppDispatch = useDispatch();\n\tconst favorites = useSelector((state: RootState) => state.favoritescities.favoritescities);\n\n\tconst handleCityClick = (city: City) => {\n\t\tconsole.log(city); // Временно выводим выбранный город в консоль\n\t};\n\n\tconst handleDeleteClick = (cityName: string) => {\n\t\tdispatch(removeFavoriteCity({ cityName }));\n\t};\n\n\treturn (\n\t\t<SquarWrapper>\n\t\t\t<p>Favorites</p>\n\t\t\t<SquareContainer>\n\t\t\t\t{favorites.map((item: City, index) => (\n\t\t\t\t\t<ListItem key={index} onClick={() => handleCityClick(item)}>\n\t\t\t\t\t\t<span>{item.name}</span>\n\t\t\t\t\t\t<DeleteIcon onClick={() => handleDeleteClick(item.name)} />\n\t\t\t\t\t</ListItem>\n\t\t\t\t))}\n\t\t\t</SquareContainer>\n\t\t</SquarWrapper>\n\t);\n};\n\nexport default Favorites;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../app/reducers';\nimport { addSelectedCity } from '../entities/citysearch';\nimport { useNavigate } from 'react-router-dom';\n\ninterface City {\n\tname: string;\n\tlat: string;\n\tlng: string;\n\tcountry: string;\n\tadmin1: string;\n\tadmin2: string;\n}\n\nconst SquareContainer = styled.div`\n\tborder-radius: 10px;\n\tbackground-color: #00ccff;\n\tz-index: 99999;\n\toverflow: auto;\n\twidth: 100%;\n\theight: 100%;\n`;\nconst SquarWrapper = styled.div`\n\tposition: absolute;\n\tleft: 20px;\n\tbottom: 140px;\n\tz-index: 99999;\n\twidth: 40%;\n\theight: 20%;\n`;\n\nconst ListItem = styled.div`\n\tpadding: 10px;\n\tborder-bottom: 1px solid #ccc;\n\tcursor: pointer;\n`;\n\nconst ResentResults = () => {\n\tconst dispatch = useDispatch();\n\tconst navigate = useNavigate();\n\tconst selectedCities = useSelector((state: RootState) => state.cities.selectedCities);\n\n\tuseEffect(() => {\n\t\t// При изменении списка selectedCities добавляем новые города в историю поиска\n\t\tselectedCities.forEach((city: City) => {\n\t\t\taddCityToHistory(city);\n\t\t});\n\n\t\t// Добавляем обработчик события popstate для отслеживания изменений в истории браузера\n\t\twindow.addEventListener('popstate', handlePopstate);\n\n\t\t// Убираем обработчик события popstate при размонтировании компонента\n\t\treturn () => {\n\t\t\twindow.removeEventListener('popstate', handlePopstate);\n\t\t};\n\t}, [selectedCities]);\n\n\tconst addCityToHistory = (city: City) => {\n\t\t// Добавляем выбранный город в историю браузера\n\t\tconst newCities = [...selectedCities, city];\n\t\tconst state = { cities: newCities };\n\t\twindow.history.pushState(state, '', ''); // Пустая строка для URL\n\t};\n\n\tconst handleCityClick = (city: City) => {\n\t\tconsole.log(city)\n\t\tdispatch(addSelectedCity({ city }));\n\t};\n\n\tconst handlePopstate = (event: PopStateEvent) => {\n\t\t// Вызывается при изменении состояния истории браузера (нажатие кнопок \"вперед\" или \"назад\")\n\t\tconst state = event.state;\n\t\tif (state && state.cities) {\n\t\t\tconsole.log('Popstate event - cities:', state.cities);\n\t\t}\n\t};\n\tconsole.log(window.history)\n\treturn (\n\t\t<SquarWrapper>\n\t\t\t<p>Resent results</p>\n\t\t\t<SquareContainer>\n\t\t\t\t{selectedCities.map((item: City, index) => (\n\t\t\t\t\t<ListItem key={index} onClick={() => handleCityClick(item)} >\n\t\t\t\t\t\t{item.name}\n\t\t\t\t\t</ListItem>\n\t\t\t\t))}\n\t\t\t</SquareContainer>\n\t\t</SquarWrapper>\n\t);\n};\n\nexport default ResentResults;\n","import React from 'react';\n\nimport { CitySearch } from '../../entities/citysearch';\nimport MapWithLocation from '../../features/map/MapWithLocation';\nimport WeatherDetails from '../../features/weather/WeatherDetails';\nimport AddIcon from '../../shared/AddIcon';\nimport Favorites from '../../shared/Favorites';\nimport ResentResults from '../../shared/ResentResults';\nimport { addFavoriteCity } from '../../entities/favorites'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/reducers';\nimport { AppDispatch } from '../../app/store';\n\nconst Main: React.FC = () => {\n\tconst dispatch: AppDispatch = useDispatch();\n\tconst currentCity = useSelector((state: RootState) => state.cities.currentCity);\n\tconst handleAddClick = () => {\n\t\tif (currentCity !== null) {\n\t\t\tdispatch(addFavoriteCity({ city: currentCity }));\n\t\t}\n\t}\n\treturn (\n\t\t<div style={{ position: 'relative' }}>\n\t\t\t<MapWithLocation />\n\t\t\t<CitySearch />\n\t\t\t<ResentResults />\n\t\t\t<Favorites />\n\t\t\t<AddIcon onClick={() => handleAddClick()} />\n\t\t\t<WeatherDetails />\n\t\t</div>\n\t);\n}\n\nexport default Main;\n"],"names":["MapWithLocation","customIcon","Icon","iconUrl","iconSize","latitude","longitude","useSelector","state","location","currentCity","cities","position","setPosition","useState","useEffect","timer","setTimeout","clearTimeout","parseFloat","lat","lng","_jsx","className","children","_jsxs","MapContainer","center","zoom","style","width","height","TileLayer","url","attribution","Marker","icon","draggable","eventHandlers","dragend","e","newPosition","target","getLatLng","console","log","Popup","Spinner","styled","div","_templateObject","_taggedTemplateLiteral","WeatherDetailsContainer","WeatherDetails","weatherData","forecastSelector","name","temperature","feelsLike","humidity","pressure","windSpeed","useMemo","convertToCelsius","temp","Math","round","StyledAddIcon","MdFormatListBulletedAdd","_ref","onClick","AiOutlineCloseCircle","color","size","SquareContainer","SquarWrapper","_templateObject2","ListItem","_templateObject3","Favorites","dispatch","useDispatch","favorites","favoritescities","map","item","index","handleCityClick","city","DeleteIcon","handleDeleteClick","cityName","removeFavoriteCity","ResentResults","selectedCities","useNavigate","forEach","addCityToHistory","window","addEventListener","handlePopstate","removeEventListener","history","pushState","event","addSelectedCity","Main","CitySearch","AddIcon","addFavoriteCity"],"sourceRoot":""}